// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package todo

import (
	"context"
)

const getNoteByIdFromDB = `-- name: GetNoteByIdFromDB :one
SELECT id, title, content FROM notes
WHERE id = ?
`

func (q *Queries) GetNoteByIdFromDB(ctx context.Context, id []byte) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteByIdFromDB, id)
	var i Note
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const getNotesFromDB = `-- name: GetNotesFromDB :many
SELECT id, title, content FROM notes
`

func (q *Queries) GetNotesFromDB(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getNotesFromDB)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.ID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postNoteToDB = `-- name: PostNoteToDB :one
INSERT INTO notes (
    id, title, content
) VALUES (
    ?, ?, ?
) RETURNING id
`

type PostNoteToDBParams struct {
	ID      []byte
	Title   string
	Content string
}

func (q *Queries) PostNoteToDB(ctx context.Context, arg PostNoteToDBParams) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, postNoteToDB, arg.ID, arg.Title, arg.Content)
	var id []byte
	err := row.Scan(&id)
	return id, err
}
